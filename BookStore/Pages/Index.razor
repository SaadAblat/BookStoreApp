@page "/"

@inject IDbContextFactory<DataContext> ContextFactory
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject CartService CartService




<PageTitle>Index</PageTitle>

<CartComponent CartItems="@_cartItems"></CartComponent>

<div id="top-nav" class="fs-small">
    <div @onclick="AllBooks" role="button" class="m-auto text-nowrap">All Books</div>
    <div @onclick="ToggleFictionDropdown" role="button" class="m-auto dropdown-toggle">
        Fiction
        @if (isFictionDropdownOpen)
        {
            <div class="dropdown-menu dropdown-menu-right show position-absolute">
                @foreach (var genre in _genres)
                {
                    if (genre.IsFiction)
                    {
                        <div @onclick="async () => await SelectGenre(genre)" class="dropdown-item fs-small">@genre.Name</div>
                    }
                }
            </div>
        }
    </div>
    <div @onclick="ToggleNonFictionDropdown" role="button" class="m-auto dropdown-toggle">
        Non Fiction
        @if (isNonFictionDropdownOpen)
        {
            <div class="dropdown-menu dropdown-menu-right show position-absolute">
                @foreach (var genre in _genres)
                {
                    if (!genre.IsFiction)
                    {
                        <div @onclick="async () => await SelectGenre(genre)" class="dropdown-item fs-small">@genre.Name</div>
                    }
                }
            </div>
        }
    </div>

    <div class="w-100">
        <SearchBox Items="_books" OnSearch="UpdateFilteredBooks"></SearchBox>
    </div>

</div>
<div class="page-container">



    @if (_selectedGenre.Name != null)
    {
        <div class="genre my-5">
            <div class="genre-title fs-big my-2">@_selectedGenre.Name</div>
            <div class="genre-description fs-small">@_selectedGenre.Description</div>
        </div>
    }
    else
    {
        <div class="genre my-5">
            <div class="genre-title fs-big my-2">All Books</div>
        </div>
    }

    <div id="books">
        @foreach (var book in _filteredBooks)
        {
            <div class="book-container">
                <img class="book-cover" role="button" @onclick="() => GoToBookPage(book.ID)" src="@book.BookCoverUrl" />
                <div class="book-title fs-normal fw-bold" role="button" @onclick="() => GoToBookPage(book.ID)">
                    @book.Title
                </div>
                <div class="book-author fs-small" role="button" @onclick="() => GoToAuthorPage(book.AuthorId)">
                    @book.Author.Name
                </div>
                <div class="book-price text-center my-2" role="button">
                    @book.Price.ToString("C2")
                </div>
                <AuthorizeView>
                    <Authorized>
                        <button @onclick="async () => await AddToCartAsync(book)" class="btn btn-success btn-sm mb-3">Add to cart</button>
                    </Authorized>

                    <NotAuthorized>
                        <a role="button" href="Identity/Account/Login" class="btn btn-success btn-sm mb-3">Add to cart</a>
                    </NotAuthorized>

                </AuthorizeView>

            </div>
        }

    </div>

</div>


@code {
    void AllBooks()
    {
        _filteredBooks = _books.ToList();
        _selectedGenre = new Genre();
    }

    bool isFictionDropdownOpen = false;
    void ToggleFictionDropdown()
    {
        isFictionDropdownOpen = !isFictionDropdownOpen;
        isNonFictionDropdownOpen = false;
    }

    bool isNonFictionDropdownOpen = false;
    void ToggleNonFictionDropdown()
    {
        isNonFictionDropdownOpen = !isNonFictionDropdownOpen;
        isFictionDropdownOpen = false;
    }

    List<Book> _books = new();
    List<Book> _filteredBooks = new();
    List<Genre> _genres = new();




    protected override async Task OnInitializedAsync()
    {
        
        using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
        {
            _books = await repo.GetAllBooksAsync();
            _filteredBooks = _books.ToList();
        }
        using (var repo = new GenreRepository(ContextFactory.CreateDbContext()))
        {
            _genres = await repo.GetAllGenreAsync();
        }

        //Adding the user
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var repo = new UserRepository(
            ContextFactory.CreateDbContext(),
            userManager,
            authenticationStateProvider))
            {
                _user = await repo.GetUserAsync();
                _cartItems = _user.Cart.CartItems.ToList();
            }
        }

    }
    //public void Dispose()
    //{
    //    CartService.OnChange -= StateHasChanged;
    //}

    Genre _selectedGenre = new();

    async Task SelectGenre(Genre genre)
    {
        _selectedGenre = genre;
        _filteredBooks = _books.Where(b => b.BookGenres.Any(bg => bg.Genre.ID == genre.ID)).ToList();
        await InvokeAsync(StateHasChanged);
    }

    void UpdateFilteredBooks(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            _filteredBooks = _books.ToList();
        }
        else
        {
            _filteredBooks = _books.Where(

                book => book.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                book.Author.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            )
            .ToList();
        }
    }

    void GoToBookPage(int id)
    {
        navigationManager.NavigateTo($"/BookPage/{id}");
    }

    void GoToAuthorPage(int id)
    {
        navigationManager.NavigateTo($"/AuthorPage/{id}");
    }


    //Adding the user
    ApplicationUser _user = new ApplicationUser();
    List<CartItem> _cartItems = new();

    async Task AddToCartAsync(Book book)
    {
        using (var repo = new UserRepository(
            ContextFactory.CreateDbContext(),
            userManager,
            authenticationStateProvider))
        {
            var item = await repo.AddToCartAsync(book, _user);
            await repo.UpdateItem(item);
            _user = await repo.GetUserAsync();
            _cartItems = _user.Cart.CartItems.ToList();
            
        }
        await InvokeAsync(StateHasChanged);
        CartService.ShowCart = true;

    }

}