@page "/ManageBooks"
@using BookStore.Data;
@using BookStore.Data.Repositories.Admin;
@using BookStore.Entities;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<DataContext> ContextFactory;

@inject NavigationManager NavigationManager

<AuthorizeView Roles="Admin">
    <Authorized>
        
        <div class="container vh-100 shadow d-flex flex-column w-100 text-center">
            <div class="fs-3"> Manage Books </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>ISBN</th>
                        <th>Publisher</th>
                        <th>Publication Year</th>
                        <th>Price</th>
                        <th>Genres</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in _books)
                    {
                        <tr>
                            <td>@book.Title</td>
                            <td>@book.Author.Name</td>
                            <td>@book.ISBN</td>
                            <td>@book.PublisherName</td>
                            <td>@book.PublicationYear</td>
                            <td>@book.Price.ToString("C2")</td>
                            <td>
                                @foreach (var genre in book.BookGenres)
                                {
                                    <span>@genre.Genre.Name; </span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => GoToUpdateBook(book.ID)">Update</button>
                                <button class="btn btn-danger" @onclick="() => DeleteBook(book.ID)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-flex flex-column gap-2 my-3">
                <NavLink class="fs-5" href="AddAuthor">Add a new Author</NavLink>
                <NavLink class="fs-5" href="AddGenre">Add a new genre</NavLink>
                <NavLink class="fs-5" href="AddBook">Add a new book</NavLink>
            </div>
        </div>


    </Authorized>

    <NotAuthorized>
        <div>Not authorized</div>
    </NotAuthorized>
</AuthorizeView>


@code {

    List<Book> _books = new();


    protected override async Task OnInitializedAsync()
    {
        //Get Authors
        using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
        {
            _books = await repo.GetAllBooksAsync();
        }
    }

    async Task DeleteBook(int id)
    {
        if (_books.Any(x => x.ID == id))
        {
            using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
            {

                _books.Remove(_books.FirstOrDefault(x => x.ID == id));
                await repo.DeleteBookAsync(id);
                await InvokeAsync(StateHasChanged);
            }

        }
    }

    private void GoToUpdateBook(int id)
    {
        NavigationManager.NavigateTo($"/updatebook/{id}");
    }
}
