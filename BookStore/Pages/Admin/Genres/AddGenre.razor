@page "/AddGenre"
@using BookStore.Data;
@using BookStore.Data.Repositories.Admin;
@using BookStore.Entities;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DataContext> ContextFactory;

<AuthorizeView Roles="Admin">
    <Authorized Context="AuthContext">


        <EditForm Model="_createdGenre" OnValidSubmit="SaveGenreAsync">

            <div class="form-control d-flex flex-column m-auto p-5 m-3" style="max-width:900px">

                <h4>Add a new genre</h4>
                <DataAnnotationsValidator />
                <ValidationSummary />

                @*Genre Name*@
                <label  for="name" class="form-label mt-3"> Name</label>
                <InputText id="name" class="form-input form-control" @bind-Value="_createdGenre.Name" />
                <ValidationMessage For="@(() => _createdGenre.Name)" />

                @*Description*@
                <label for="description" class="form-label mt-3"> Description</label>
                <InputText id="description" class="form-input form-control" @bind-Value="_createdGenre.Description" />
                <ValidationMessage For="@(() => _createdGenre.Description)" />

                @*IsFiction*@
                <div class="d-flex flex-row gap-5  mt-3">

                    <label for="description" class="form-label"> Is Fiction?</label>
                    <InputCheckbox id="description" class="form-check  " @bind-Value="_createdGenre.IsFiction" />
                    <ValidationMessage For="@(() => _createdGenre.IsFiction)" />
                </div>



            </div>
            <div class="w-100 text-center p-5"> <button class="btn btn-success btn-lg">Save Genre</button></div>
            <div class=" w-100 text-center p-5">
                <div class="alert-success"> @validationMessage</div>
            </div>
        </EditForm>
    </Authorized>

    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {

    Genre _createdGenre = new();

    string validationMessage = "";
    async Task ResetValidationMessage()
    {
        await Task.Delay(3000);
        validationMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    async Task SaveGenreAsync()
    {
        using (var repo = new GenreRepository(ContextFactory.CreateDbContext()))
        {
            await repo.CreateGenreAsync(_createdGenre);
        }

        _createdGenre = new Genre();

        validationMessage = "Genre added succesfully";
        await InvokeAsync(StateHasChanged);

        await ResetValidationMessage();

    }

}
