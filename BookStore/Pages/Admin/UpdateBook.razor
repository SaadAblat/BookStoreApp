@page "/Updatebook/{id:int}"

@using BookStore.Data;
@using BookStore.Data.Repositories.Admin;
@using BookStore.Entities;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DataContext> ContextFactory;

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="form-control d-flex flex-column m-auto  p-5 m-3" style="max-width:900px">

            <h4>Update a Book</h4>

            @*Book Title*@
            <label for="title" class="form-label"> Title</label>
            <input id="title" type="text" class="form-input form-control" @bind-value="_updatedBook.Title" />

            @*AuthorId*@
            <label for="title" class="form-label"> Author Id</label>
            <select class="form-input form-control " id="book-author" @bind="_updatedBook.AuthorId">
                <option value="">Select an author</option>

                @foreach (var author in _authors)
                {
                    <option value="@author.ID">@author.Name</option>
                }
            </select>
            <a target="_blank" class="fs-5" href="AddAuthor">Add a new Author</a>


            @*Book ISBN*@
            <label for="ISBN" class="form-label"> ISBN</label>
            <input id="ISBN" type="text" class="form-input form-control" @bind-value="_updatedBook.ISBN" />

            @*Book PublisherName*@
            <label for="PublisherName" class="form-label"> PublisherName</label>
            <input id="PublisherName" type="text" class="form-input form-control" @bind-value="_updatedBook.PublisherName" />

            @*Book PublicationYear*@
            <label for="PublicationYear" class="form-label"> PublicationYear</label>
            <input id="PublicationYear" type="text" class="form-input form-control" @bind-value="_updatedBook.PublicationYear" />

            @*Book Price*@
            <label for="Price" class="form-label"> Price</label>
            <input id="Price" type="text" class="form-input form-control" @bind-value="_updatedBook.Price" />

            @*Book StockQuantity*@
            <label for="StockQuantity" class="form-label"> StockQuantity</label>
            <input id="StockQuantity" type="text" class="form-input form-control" @bind-value="_updatedBook.StockQuantity" />

            @*Book BookCoverUrl*@
            <label for="BookCoverUrl" class="form-label"> BookCoverUrl</label>
            <input id="BookCoverUrl" type="text" class="form-input form-control" @bind-value="_updatedBook.BookCoverUrl" />

            @*Book genres*@
            <div class="d-flex gap-4 flex-wrap my-3">
                @if(_genres != null && _genres.Any())
                {
                    @foreach (var genre in _genres)
                    {

                            <input type="checkbox" value="@genre.ID" @onchange="@(e => HandleCheckChange(e, genre))"
                               checked="@_updatedBook.BookGenres.Any(bg => bg.GenreId == genre.ID)" /> @genre.Name
  
                    }
                }

            </div>
            <a target="_blank" class="fs-5" href="AddGenre">Add a new Genre</a>


        </div>

        <div class="w-100 text-center p-5"> <button class="btn btn-success btn-lg" @onclick="SaveBookAsync">Save author</button></div>
        <div class=" w-100 text-center p-5">
            <div class="alert-success"> @validationMessage</div>
        </div>
    </Authorized>

    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    Book _updatedBook = new() { BookGenres = new List<BookGenre>() };

    List<Author> _authors = new();
    List<Genre> _genres = new List<Genre>();
    List<BookGenre> _bookGenres = new();

    protected override async Task OnInitializedAsync()
    {
        //Get Authors
        using (var repo = new AuthorRepository(ContextFactory.CreateDbContext()))
        {
            _authors = await repo.GetAllAuthorsAsync();

        }

        //Get Genres
        using (var repo = new GenreRepository(ContextFactory.CreateDbContext()))
        {
            _genres = await repo.GetAllGenreAsync();

        }
        //Get Book
        using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
        {
            _updatedBook = await repo.GetBookByIdAsync(Id);
            _bookGenres = _updatedBook.BookGenres.ToList();
        }
    }


    string validationMessage = "";
    async Task ResetValidationMessage()
    {
        await Task.Delay(3000);
        validationMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    async Task SaveBookAsync()
    {
        using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
        {
            await repo.UpdateBookAsync(_updatedBook);
        }
       
        
        validationMessage = "Book updated succesfully";
        await InvokeAsync(StateHasChanged);

        await ResetValidationMessage();
        
    }

    void HandleCheckChange(ChangeEventArgs e, Genre genre)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            _bookGenres.Add(new BookGenre
                {
                    BookId = _updatedBook.ID,
                    GenreId = genre.ID
                }
            );
        }
        else
        {
            _bookGenres.RemoveAll(bg => bg.GenreId == genre.ID);
           
        }
        _updatedBook.BookGenres = _bookGenres;
    }

}


