@page "/BookPage/{id:int}"

@inject IDbContextFactory<DataContext> ContextFactory
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject CartService CartService


<CartComponent CartItems="@_cartItems"></CartComponent>

<div class="page-container fs-small">
    @if (_book != null)
    {
        <div class="d-flex gap-4">
            <img id="book-cover" src="@_book.BookCoverUrl" />
            <div class="d-flex flex-column">
                <div role="button" @onclick="() => GoToAuthorPage(_author.ID)" class="book-author">@_author.Name</div>
                <div class="book-title fs-big fw-bold">@_book.Title</div>
                <div class="book-description">@_book.Description</div>

                <button class="btn btn-success btn-sm m-5">Add to cart</button>

            </div>
        </div>
    }
</div>


@code {

    [Parameter]
    public int id { get; set; }

    Book _book = new();
    Author _author = new();


    //Adding the user
    ApplicationUser _user = new ApplicationUser();
    List<CartItem> _cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        using (var repo = new BookRepository(ContextFactory.CreateDbContext()))
        {
            _book = await repo.GetBookByIdAsync(id);
            _author = _book.Author;
        }
        //Adding the user
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var repo = new UserRepository(
            ContextFactory.CreateDbContext(),
            userManager,
            authenticationStateProvider))
            {
                _user = await repo.GetUserAsync();
                _cartItems = _user.Cart.CartItems.ToList();
            }
        }
    }

    void GoToAuthorPage(int id)
    {
        navigationManager.NavigateTo($"/AuthorPage/{id}");
    }

    async Task AddToCartAsync(Book book)
    {
        using (var repo = new UserRepository(
            ContextFactory.CreateDbContext(),
            userManager,
            authenticationStateProvider))
        {
            var item = await repo.AddToCartAsync(book, _user);
            await repo.UpdateItem(item);
            _user = await repo.GetUserAsync();
            _cartItems = _user.Cart.CartItems.ToList();

        }
        await InvokeAsync(StateHasChanged);
        CartService.ShowCart = true;

    }

}
